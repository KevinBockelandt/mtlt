File format
------------

There are 3 top level sections in the file that are put one after the other:

- tag section
- thing section
- current timer

Here is a summary of the layout (details explanations below):

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
TAG SECTION
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
64b - number of bytes in the tag section
16b - number of tags
------------------------------------------------------------
 7b - length of the tag name                              T
 1b - status                                              A
16b - id                                                  G
 ?? - name of the tag

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
THING SECTION
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
24b - number of things
------------------------------------------------------------
 8b - length of the thing name                            T
19b - id                                                  H
11b - number of timers                                    I
 6b - number of tags                                      N
 1b - status                                              G
25b - creation date
25b - target
16b - estimation
25b - completion

 ?? - name of the thing
 ?? - ids of tags associated to the thing
------------------------------------------------------------
11b - id                                                 TI
12b - duration                                           ME
25b - start                                              R

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
CURRENT TIMER SECTION
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
19b - id thing
11b - id last timer
25b - start
 1b - empty



1/ Tag section
----------------

The first 8 bytes of this section contain the total number of bytes taken by the section (including these first 8 bytes).

The next 2 bytes contain the number of `tags` present in the section.

Then there is a succession of `tags` that consists of :

- the size of the name of the `tag` on 7 bits
- the status of the `tag` on 1 bit
- the ID of the `tag` on 2 bytes
- the name


2/ Thing section
----------------

After all the `tags`, the next 3 bytes contain the number of `things` present in the file. That list of `things` is what makes the rest of the file.

A `thing` has 3 parts :

- Infos on the `thing`
- A list of `tag` ids associated to the `thing`
- A list of `timers` associated to the `thing`

The first part is composed of :

- the size of the name of the `thing` on 1 byte
- the ID of the `thing` on 19 bits
- the number of `timers` associated to the `thing` on 13 bits
- the number of `tags` associated to the `thing` on 7 bits
- the current status of the `thing` on 1 bits
- the creation timestamp of the `thing` on 25 bits
- the target of the `thing` on 25 bits
- the estimated amount of time necessary for the `thing` on 17 bits (stored in minutes)
- the absolute value of the offset between the target and completion time on 21 bits
- a boolean indicating if the completion offset is before or after the target
- the name

The second part is then composed of `tag` ids. The total size is the indicated number of `tags` * 2 bytes. Since each ID is on 16 bits.

The third part is a series of `timers`. Each `timer` has a fixed size of 6 bytes and is composed of :

- the ID of the `timer` on 12 bits
- the duration of the `timer` on 11 bits (stored in minutes)
- the timestamp* for the start of the `timer` on 25 bits


3/ Current timer
----------------

The current timer section is composed of 4 items:

- the ID of the associated `thing` on 19 bits
- the ID of the last `timer` on 11 bits
- the timestamp (see footnote) of the start of the timer on 25 bits
- an unused space of 1 bits to align the data with multiples of 8

If the timestamp is equal to 0 it means the timer is not active. If the timestamp contains a value it means that the timer is currently running.


* Timestamps are not actually standard UNIX timestamp. Instead we store the number of seconds since the start of January 1st 2020. This way we keep a similar system but push back the year 2038 problem. It makes sense since we don't intend to handle calendar dates but only handle time offsets, and not in a crazy large range.


